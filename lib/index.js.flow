// @flow

declare export var LEVELS_SYSLOG: {
  EMERGENCY: string,
  ALERT: string,
  CRITICAL: string,
  ERROR: string,
  WARNING: string,
  NOTICE: string,
  INFORMATIONAL: string,
  DEBUG: string
};

type bugsy$CreateOptions = {
  level?: string;
  code?: string;
  inherits?: Function;
};

export type CreateOptions = bugsy$CreateOptions;

export type BaseError<T> = Error & {
  level: ?string;
  code: ?string;
  meta: ?T;
};

declare export function create<T>(name: string, message: string, options?: CreateOptions): Class<BaseError<T>>;

declare export class AggregateError extends Array {};

type bugsy$Reducer = (error: any) => ?number;

export type Reducer = bugsy$Reducer;

declare export function composeReducers(...reducers: Reducer[]): ?number;
declare export function reduce<T: Function>(reduces: Reducer[], fn: T): T;

declare export function withCode(error: any, code: any): boolean;
declare export function everyWithCode(error: any, code: any): boolean;
declare export function instanceOf(error: any, code: any): boolean;
declare export function everyInstanceOf(error: any, code: any): boolean;